//
// DO NOT EDIT THIS FILE, IT HAS BEEN GENERATED USING AndroidAnnotations.
//


package com.elhackaton.appcede.ui;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup.LayoutParams;
import com.elhackaton.appcede.R.layout;
import com.elhackaton.appcede.app.reviews.Review;
import com.elhackaton.appcede.app.reviews.ReviewClient_;
import com.google.android.gms.maps.MapFragment;
import com.googlecode.androidannotations.api.BackgroundExecutor;

public final class MapUI_
    extends MapUI
{

    private Handler handler_ = new Handler();

    @Override
    public void onCreate(Bundle savedInstanceState) {
        init_(savedInstanceState);
        super.onCreate(savedInstanceState);
        setContentView(layout.map);
    }

    private void init_(Bundle savedInstanceState) {
        client = new ReviewClient_();
    }

    private void afterSetContentView_() {
        map = ((MapFragment) findNativeFragmentById(com.elhackaton.appcede.R.id.map));
        afterView();
    }

    @Override
    public void setContentView(int layoutResID) {
        super.setContentView(layoutResID);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view, LayoutParams params) {
        super.setContentView(view, params);
        afterSetContentView_();
    }

    @Override
    public void setContentView(View view) {
        super.setContentView(view);
        afterSetContentView_();
    }

    public static MapUI_.IntentBuilder_ intent(Context context) {
        return new MapUI_.IntentBuilder_(context);
    }

    /**
     * You should check that context is an activity before calling this method
     * 
     */
    private Fragment findNativeFragmentById(int id) {
        Activity activity_ = ((Activity) this);
        return activity_.getFragmentManager().findFragmentById(id);
    }

    @Override
    public void showInMaps(final Review[] reviews) {
        handler_.post(new Runnable() {


            @Override
            public void run() {
                try {
                    MapUI_.super.showInMaps(reviews);
                } catch (RuntimeException e) {
                    Log.e("MapUI_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    @Override
    public void createMarkers() {
        BackgroundExecutor.execute(new Runnable() {


            @Override
            public void run() {
                try {
                    MapUI_.super.createMarkers();
                } catch (RuntimeException e) {
                    Log.e("MapUI_", "A runtime exception was thrown while executing code in a runnable", e);
                }
            }

        }
        );
    }

    public static class IntentBuilder_ {

        private Context context_;
        private final Intent intent_;

        public IntentBuilder_(Context context) {
            context_ = context;
            intent_ = new Intent(context, MapUI_.class);
        }

        public Intent get() {
            return intent_;
        }

        public MapUI_.IntentBuilder_ flags(int flags) {
            intent_.setFlags(flags);
            return this;
        }

        public void start() {
            context_.startActivity(intent_);
        }

        public void startForResult(int requestCode) {
            if (context_ instanceof Activity) {
                ((Activity) context_).startActivityForResult(intent_, requestCode);
            } else {
                context_.startActivity(intent_);
            }
        }

    }

}
